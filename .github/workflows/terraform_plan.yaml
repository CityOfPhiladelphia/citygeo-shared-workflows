name: Terraform Plan

on:
  workflow_call:
    inputs:
      tf_token_keeper_path:
        required: true
        type: string
      aws_access_key_id_keeper_path:
        required: true
        type: string
      aws_secret_access_key_keeper_path:
        required: true
        type: string
      tf_dir:
        required: true
        type: string
        default: "."
      cli_opts:
        required: false
        type: string
        default: " "
    secrets:
      KSM_CONFIG:
        required: true

jobs:
  terraform_plan:
    runs-on: self-hosted
    container:
      image: buildpack-deps:bookworm
    steps:
      - uses: actions/checkout@v4
        name: Checkout source code
      - name: Retrieve secrets from Keeper
        id: ksecrets
        uses: Keeper-Security/ksm-action@master
        with:
          keeper-secret-config: ${{ secrets.KSM_CONFIG }}
          secrets: |-
            ${{ inputs.tf_token_keeper_path }} > env:TF_TOKEN
            ${{ inputs.aws_access_key_id_keeper_path }} > env:AWS_ACCESS_KEY_ID
            ${{ inputs.aws_secret_access_key_keeper_path }} > env:AWS_SECRET_ACCESS_KEY
      - name: Setup Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          check-latest: true
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ env.TF_TOKEN }}
      - name: Terraform Init
        run: |
          cd ${{ inputs.tf_dir }}
          terraform init
      - name: Terraform Plan
        id: plan
        run: |
          cd ${{ inputs.tf_dir }}
          terraform plan -no-color -lock-timeout=30s
        env:
          KEEPER_CREDENTIAL: ${{ secrets.KSM_CONFIG }}
      - name: Write terraform plan output to pull request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform plan output for ${{ inputs.tf_dir }}')
            })

            // 2. Prepare format of the comment
            const output = `### Terraform plan output for ${{ inputs.tf_dir }}`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
